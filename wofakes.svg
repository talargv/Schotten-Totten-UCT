<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="314" onload="init(evt)" viewBox="0 0 1200 314" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="314" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o wofakes.svg -s python test2.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="303.00"> </text><svg id="frames" x="10" width="1180" total_samples="19321"><g><title>simulate_turn (MCTS_v2.py:138) (28 samples, 0.14%)</title><rect x="0.7091%" y="212" width="0.1449%" height="15" fill="rgb(227,0,7)" fg:x="137" fg:w="28"/><text x="0.9591%" y="222.50"></text></g><g><title>tree_policy (MCTS_v2.py:161) (115 samples, 0.60%)</title><rect x="0.3105%" y="196" width="0.5952%" height="15" fill="rgb(217,0,24)" fg:x="60" fg:w="115"/><text x="0.5605%" y="206.50"></text></g><g><title>UCB (MCTS_v2.py:55) (40 samples, 0.21%)</title><rect x="1.0144%" y="212" width="0.2070%" height="15" fill="rgb(221,193,54)" fg:x="196" fg:w="40"/><text x="1.2644%" y="222.50"></text></g><g><title>UCB (MCTS_v2.py:56) (33 samples, 0.17%)</title><rect x="1.2215%" y="212" width="0.1708%" height="15" fill="rgb(248,212,6)" fg:x="236" fg:w="33"/><text x="1.4715%" y="222.50"></text></g><g><title>tree_policy (MCTS_v2.py:82) (78 samples, 0.40%)</title><rect x="0.9989%" y="196" width="0.4037%" height="15" fill="rgb(208,68,35)" fg:x="193" fg:w="78"/><text x="1.2489%" y="206.50"></text></g><g><title>tree_search (MCTS_v2.py:193) (240 samples, 1.24%)</title><rect x="0.2329%" y="180" width="1.2422%" height="15" fill="rgb(232,128,0)" fg:x="45" fg:w="240"/><text x="0.4829%" y="190.50"></text></g><g><title>uct (MCTS_v2.py:221) (281 samples, 1.45%)</title><rect x="0.1190%" y="164" width="1.4544%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="281"/><text x="0.3690%" y="174.50"></text></g><g><title>uct (MCTS_v2.py:233) (26 samples, 0.13%)</title><rect x="1.6562%" y="164" width="0.1346%" height="15" fill="rgb(228,23,34)" fg:x="320" fg:w="26"/><text x="1.9062%" y="174.50"></text></g><g><title>copy (schotten_again.py:267) (118 samples, 0.61%)</title><rect x="2.1220%" y="212" width="0.6107%" height="15" fill="rgb(218,30,26)" fg:x="410" fg:w="118"/><text x="2.3720%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:267) (110 samples, 0.57%)</title><rect x="2.1634%" y="228" width="0.5693%" height="15" fill="rgb(220,122,19)" fg:x="418" fg:w="110"/><text x="2.4134%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:267) (99 samples, 0.51%)</title><rect x="2.2204%" y="244" width="0.5124%" height="15" fill="rgb(250,228,42)" fg:x="429" fg:w="99"/><text x="2.4704%" y="254.50"></text></g><g><title>copy (schotten_again.py:114) (68 samples, 0.35%)</title><rect x="2.3808%" y="260" width="0.3519%" height="15" fill="rgb(240,193,28)" fg:x="460" fg:w="68"/><text x="2.6308%" y="270.50"></text></g><g><title>copy (schotten_again.py:269) (23 samples, 0.12%)</title><rect x="2.7431%" y="212" width="0.1190%" height="15" fill="rgb(216,20,37)" fg:x="530" fg:w="23"/><text x="2.9931%" y="222.50"></text></g><g><title>make_move (schotten_again.py:552) (178 samples, 0.92%)</title><rect x="2.0289%" y="196" width="0.9213%" height="15" fill="rgb(206,188,39)" fg:x="392" fg:w="178"/><text x="2.2789%" y="206.50"></text></g><g><title>make_move (schotten_again.py:557) (20 samples, 0.10%)</title><rect x="2.9553%" y="196" width="0.1035%" height="15" fill="rgb(217,207,13)" fg:x="571" fg:w="20"/><text x="3.2053%" y="206.50"></text></g><g><title>__eq__ (schotten_again.py:35) (119 samples, 0.62%)</title><rect x="3.8093%" y="212" width="0.6159%" height="15" fill="rgb(231,73,38)" fg:x="736" fg:w="119"/><text x="4.0593%" y="222.50"></text></g><g><title>__eq__ (schotten_again.py:36) (75 samples, 0.39%)</title><rect x="4.4252%" y="212" width="0.3882%" height="15" fill="rgb(225,20,46)" fg:x="855" fg:w="75"/><text x="4.6752%" y="222.50"></text></g><g><title>__init__ (schotten_again.py:20) (20 samples, 0.10%)</title><rect x="4.8134%" y="212" width="0.1035%" height="15" fill="rgb(210,31,41)" fg:x="930" fg:w="20"/><text x="5.0634%" y="222.50"></text></g><g><title>make_move (schotten_again.py:558) (378 samples, 1.96%)</title><rect x="3.0588%" y="196" width="1.9564%" height="15" fill="rgb(221,200,47)" fg:x="591" fg:w="378"/><text x="3.3088%" y="206.50">m..</text></g><g><title>make_move (schotten_again.py:559) (55 samples, 0.28%)</title><rect x="5.0153%" y="196" width="0.2847%" height="15" fill="rgb(226,26,5)" fg:x="969" fg:w="55"/><text x="5.2653%" y="206.50"></text></g><g><title>is_legal_claim (schotten_again.py:286) (23 samples, 0.12%)</title><rect x="5.6933%" y="244" width="0.1190%" height="15" fill="rgb(249,33,26)" fg:x="1100" fg:w="23"/><text x="5.9433%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:289) (27 samples, 0.14%)</title><rect x="5.8123%" y="244" width="0.1397%" height="15" fill="rgb(235,183,28)" fg:x="1123" fg:w="27"/><text x="6.0623%" y="254.50"></text></g><g><title>hand_strength (schotten_again.py:117) (26 samples, 0.13%)</title><rect x="5.8175%" y="260" width="0.1346%" height="15" fill="rgb(221,5,38)" fg:x="1124" fg:w="26"/><text x="6.0675%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:35) (25 samples, 0.13%)</title><rect x="6.3765%" y="260" width="0.1294%" height="15" fill="rgb(247,18,42)" fg:x="1232" fg:w="25"/><text x="6.6265%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:42) (20 samples, 0.10%)</title><rect x="6.7233%" y="260" width="0.1035%" height="15" fill="rgb(241,131,45)" fg:x="1299" fg:w="20"/><text x="6.9733%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:299) (172 samples, 0.89%)</title><rect x="6.0090%" y="244" width="0.8902%" height="15" fill="rgb(249,31,29)" fg:x="1161" fg:w="172"/><text x="6.2590%" y="254.50"></text></g><g><title>strength_from_list (schotten_again.py:98) (23 samples, 0.12%)</title><rect x="7.1580%" y="260" width="0.1190%" height="15" fill="rgb(225,111,53)" fg:x="1383" fg:w="23"/><text x="7.4080%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:301) (73 samples, 0.38%)</title><rect x="6.9044%" y="244" width="0.3778%" height="15" fill="rgb(238,160,17)" fg:x="1334" fg:w="73"/><text x="7.1544%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:309) (99 samples, 0.51%)</title><rect x="7.3806%" y="244" width="0.5124%" height="15" fill="rgb(214,148,48)" fg:x="1426" fg:w="99"/><text x="7.6306%" y="254.50"></text></g><g><title>__eq__ (schotten_again.py:35) (532 samples, 2.75%)</title><rect x="13.3533%" y="260" width="2.7535%" height="15" fill="rgb(232,36,49)" fg:x="2580" fg:w="532"/><text x="13.6033%" y="270.50">__..</text></g><g><title>__eq__ (schotten_again.py:37) (318 samples, 1.65%)</title><rect x="16.1068%" y="260" width="1.6459%" height="15" fill="rgb(209,103,24)" fg:x="3112" fg:w="318"/><text x="16.3568%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:38) (31 samples, 0.16%)</title><rect x="17.7527%" y="260" width="0.1604%" height="15" fill="rgb(229,88,8)" fg:x="3430" fg:w="31"/><text x="18.0027%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:39) (296 samples, 1.53%)</title><rect x="17.9132%" y="260" width="1.5320%" height="15" fill="rgb(213,181,19)" fg:x="3461" fg:w="296"/><text x="18.1632%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:42) (315 samples, 1.63%)</title><rect x="19.4452%" y="260" width="1.6304%" height="15" fill="rgb(254,191,54)" fg:x="3757" fg:w="315"/><text x="19.6952%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:310) (2,768 samples, 14.33%)</title><rect x="7.8930%" y="244" width="14.3264%" height="15" fill="rgb(241,83,37)" fg:x="1525" fg:w="2768"/><text x="8.1430%" y="254.50">is_legal_claim (schott..</text></g><g><title>__getitem__ (schotten_again.py:83) (202 samples, 1.05%)</title><rect x="21.1739%" y="260" width="1.0455%" height="15" fill="rgb(233,36,39)" fg:x="4091" fg:w="202"/><text x="21.4239%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:311) (155 samples, 0.80%)</title><rect x="22.2193%" y="244" width="0.8022%" height="15" fill="rgb(226,3,54)" fg:x="4293" fg:w="155"/><text x="22.4693%" y="254.50"></text></g><g><title>__init__ (schotten_again.py:20) (26 samples, 0.13%)</title><rect x="23.5547%" y="260" width="0.1346%" height="15" fill="rgb(245,192,40)" fg:x="4551" fg:w="26"/><text x="23.8047%" y="270.50"></text></g><g><title>strength_from_list (schotten_again.py:111) (21 samples, 0.11%)</title><rect x="23.9687%" y="260" width="0.1087%" height="15" fill="rgb(238,167,29)" fg:x="4631" fg:w="21"/><text x="24.2187%" y="270.50"></text></g><g><title>strength_from_list (schotten_again.py:98) (90 samples, 0.47%)</title><rect x="24.2016%" y="260" width="0.4658%" height="15" fill="rgb(232,182,51)" fg:x="4676" fg:w="90"/><text x="24.4516%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:313) (346 samples, 1.79%)</title><rect x="23.0319%" y="244" width="1.7908%" height="15" fill="rgb(231,60,39)" fg:x="4450" fg:w="346"/><text x="23.2819%" y="254.50">i..</text></g><g><title>strength_from_list (schotten_again.py:99) (30 samples, 0.16%)</title><rect x="24.6675%" y="260" width="0.1553%" height="15" fill="rgb(208,69,12)" fg:x="4766" fg:w="30"/><text x="24.9175%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:322) (67 samples, 0.35%)</title><rect x="24.9262%" y="244" width="0.3468%" height="15" fill="rgb(235,93,37)" fg:x="4816" fg:w="67"/><text x="25.1762%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:323) (533 samples, 2.76%)</title><rect x="25.2730%" y="244" width="2.7587%" height="15" fill="rgb(213,116,39)" fg:x="4883" fg:w="533"/><text x="25.5230%" y="254.50">is..</text></g><g><title>is_legal_claim (schotten_again.py:324) (3,072 samples, 15.90%)</title><rect x="28.0317%" y="244" width="15.8998%" height="15" fill="rgb(222,207,29)" fg:x="5416" fg:w="3072"/><text x="28.2817%" y="254.50">is_legal_claim (schotten..</text></g><g><title>is_legal_claim (schotten_again.py:325) (773 samples, 4.00%)</title><rect x="43.9315%" y="244" width="4.0008%" height="15" fill="rgb(206,96,30)" fg:x="8488" fg:w="773"/><text x="44.1815%" y="254.50">is_l..</text></g><g><title>__init__ (schotten_again.py:20) (37 samples, 0.19%)</title><rect x="48.3308%" y="260" width="0.1915%" height="15" fill="rgb(218,138,4)" fg:x="9338" fg:w="37"/><text x="48.5808%" y="270.50"></text></g><g><title>strength_from_list (schotten_again.py:98) (36 samples, 0.19%)</title><rect x="48.8691%" y="260" width="0.1863%" height="15" fill="rgb(250,191,14)" fg:x="9442" fg:w="36"/><text x="49.1191%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:327) (228 samples, 1.18%)</title><rect x="47.9427%" y="244" width="1.1801%" height="15" fill="rgb(239,60,40)" fg:x="9263" fg:w="228"/><text x="48.1927%" y="254.50"></text></g><g><title>claim_stone (schotten_again.py:358) (8,428 samples, 43.62%)</title><rect x="5.6260%" y="228" width="43.6209%" height="15" fill="rgb(206,27,48)" fg:x="1087" fg:w="8428"/><text x="5.8760%" y="238.50">claim_stone (schotten_again.py:358)</text></g><g><title>is_legal_claim (schotten_again.py:329) (23 samples, 0.12%)</title><rect x="49.1279%" y="244" width="0.1190%" height="15" fill="rgb(225,35,8)" fg:x="9492" fg:w="23"/><text x="49.3779%" y="254.50"></text></g><g><title>make_move (schotten_again.py:565) (8,477 samples, 43.87%)</title><rect x="5.3827%" y="196" width="43.8745%" height="15" fill="rgb(250,213,24)" fg:x="1040" fg:w="8477"/><text x="5.6327%" y="206.50">make_move (schotten_again.py:565)</text></g><g><title>claim_stone (schotten_again.py:536) (8,464 samples, 43.81%)</title><rect x="5.4500%" y="212" width="43.8073%" height="15" fill="rgb(247,123,22)" fg:x="1053" fg:w="8464"/><text x="5.7000%" y="222.50">claim_stone (schotten_again.py:536)</text></g><g><title>choose_stone_and_card (MCTS_v2.py:18) (44 samples, 0.23%)</title><rect x="49.2987%" y="212" width="0.2277%" height="15" fill="rgb(231,138,38)" fg:x="9525" fg:w="44"/><text x="49.5487%" y="222.50"></text></g><g><title>available_stones (schotten_again.py:188) (43 samples, 0.22%)</title><rect x="49.3039%" y="228" width="0.2226%" height="15" fill="rgb(231,145,46)" fg:x="9526" fg:w="43"/><text x="49.5539%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:188) (33 samples, 0.17%)</title><rect x="49.3556%" y="244" width="0.1708%" height="15" fill="rgb(251,118,11)" fg:x="9536" fg:w="33"/><text x="49.6056%" y="254.50"></text></g><g><title>simulate_turn (MCTS_v2.py:125) (32 samples, 0.17%)</title><rect x="49.5989%" y="228" width="0.1656%" height="15" fill="rgb(217,147,25)" fg:x="9583" fg:w="32"/><text x="49.8489%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (MCTS_v2.py:125) (27 samples, 0.14%)</title><rect x="49.6248%" y="244" width="0.1397%" height="15" fill="rgb(247,81,37)" fg:x="9588" fg:w="27"/><text x="49.8748%" y="254.50"></text></g><g><title>simulate_turn (MCTS_v2.py:126) (34 samples, 0.18%)</title><rect x="49.7645%" y="228" width="0.1760%" height="15" fill="rgb(209,12,38)" fg:x="9615" fg:w="34"/><text x="50.0145%" y="238.50"></text></g><g><title>simulate_turn (MCTS_v2.py:132) (69 samples, 0.36%)</title><rect x="50.2251%" y="228" width="0.3571%" height="15" fill="rgb(227,1,9)" fg:x="9704" fg:w="69"/><text x="50.4751%" y="238.50"></text></g><g><title>__len__ (schotten_again.py:60) (28 samples, 0.14%)</title><rect x="50.4373%" y="244" width="0.1449%" height="15" fill="rgb(248,47,43)" fg:x="9745" fg:w="28"/><text x="50.6873%" y="254.50"></text></g><g><title>simulate_turn (MCTS_v2.py:134) (49 samples, 0.25%)</title><rect x="50.6288%" y="228" width="0.2536%" height="15" fill="rgb(221,10,30)" fg:x="9782" fg:w="49"/><text x="50.8788%" y="238.50"></text></g><g><title>simulate_turn (MCTS_v2.py:135) (51 samples, 0.26%)</title><rect x="50.8825%" y="228" width="0.2640%" height="15" fill="rgb(210,229,1)" fg:x="9831" fg:w="51"/><text x="51.1325%" y="238.50"></text></g><g><title>strength_from_list (schotten_again.py:93) (21 samples, 0.11%)</title><rect x="51.6226%" y="244" width="0.1087%" height="15" fill="rgb(222,148,37)" fg:x="9974" fg:w="21"/><text x="51.8726%" y="254.50"></text></g><g><title>strength_from_list (schotten_again.py:98) (57 samples, 0.30%)</title><rect x="51.7520%" y="244" width="0.2950%" height="15" fill="rgb(234,67,33)" fg:x="9999" fg:w="57"/><text x="52.0020%" y="254.50"></text></g><g><title>simulate_turn (MCTS_v2.py:138) (190 samples, 0.98%)</title><rect x="51.1775%" y="228" width="0.9834%" height="15" fill="rgb(247,98,35)" fg:x="9888" fg:w="190"/><text x="51.4275%" y="238.50"></text></g><g><title>strength_from_list (schotten_again.py:99) (22 samples, 0.11%)</title><rect x="52.0470%" y="244" width="0.1139%" height="15" fill="rgb(247,138,52)" fg:x="10056" fg:w="22"/><text x="52.2970%" y="254.50"></text></g><g><title>choices (random.py:357) (23 samples, 0.12%)</title><rect x="52.2592%" y="244" width="0.1190%" height="15" fill="rgb(213,79,30)" fg:x="10097" fg:w="23"/><text x="52.5092%" y="254.50"></text></g><g><title>choose_stone_and_card (MCTS_v2.py:23) (581 samples, 3.01%)</title><rect x="49.5471%" y="212" width="3.0071%" height="15" fill="rgb(246,177,23)" fg:x="9573" fg:w="581"/><text x="49.7971%" y="222.50">cho..</text></g><g><title>simulate_turn (MCTS_v2.py:140) (75 samples, 0.39%)</title><rect x="52.1660%" y="228" width="0.3882%" height="15" fill="rgb(230,62,27)" fg:x="10079" fg:w="75"/><text x="52.4160%" y="238.50"></text></g><g><title>choices (random.py:366) (24 samples, 0.12%)</title><rect x="52.4300%" y="244" width="0.1242%" height="15" fill="rgb(216,154,8)" fg:x="10130" fg:w="24"/><text x="52.6800%" y="254.50"></text></g><g><title>make_move (schotten_again.py:567) (650 samples, 3.36%)</title><rect x="49.2573%" y="196" width="3.3642%" height="15" fill="rgb(244,35,45)" fg:x="9517" fg:w="650"/><text x="49.5073%" y="206.50">mak..</text></g><g><title>play (schotten_again.py:525) (9,838 samples, 50.92%)</title><rect x="1.8684%" y="180" width="50.9187%" height="15" fill="rgb(251,115,12)" fg:x="361" fg:w="9838"/><text x="2.1184%" y="190.50">play (schotten_again.py:525)</text></g><g><title>play (schotten_again.py:526) (27 samples, 0.14%)</title><rect x="52.7871%" y="180" width="0.1397%" height="15" fill="rgb(240,54,50)" fg:x="10199" fg:w="27"/><text x="53.0371%" y="190.50"></text></g><g><title>is_game_over (schotten_again.py:539) (22 samples, 0.11%)</title><rect x="52.8130%" y="196" width="0.1139%" height="15" fill="rgb(233,84,52)" fg:x="10204" fg:w="22"/><text x="53.0630%" y="206.50"></text></g><g><title>copy (schotten_again.py:267) (96 samples, 0.50%)</title><rect x="53.2943%" y="212" width="0.4969%" height="15" fill="rgb(207,117,47)" fg:x="10297" fg:w="96"/><text x="53.5443%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:267) (92 samples, 0.48%)</title><rect x="53.3150%" y="228" width="0.4762%" height="15" fill="rgb(249,43,39)" fg:x="10301" fg:w="92"/><text x="53.5650%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:267) (84 samples, 0.43%)</title><rect x="53.3565%" y="244" width="0.4348%" height="15" fill="rgb(209,38,44)" fg:x="10309" fg:w="84"/><text x="53.6065%" y="254.50"></text></g><g><title>copy (schotten_again.py:114) (58 samples, 0.30%)</title><rect x="53.4910%" y="260" width="0.3002%" height="15" fill="rgb(236,212,23)" fg:x="10335" fg:w="58"/><text x="53.7410%" y="270.50"></text></g><g><title>make_move (schotten_again.py:552) (150 samples, 0.78%)</title><rect x="53.1753%" y="196" width="0.7764%" height="15" fill="rgb(242,79,21)" fg:x="10274" fg:w="150"/><text x="53.4253%" y="206.50"></text></g><g><title>copy (schotten_again.py:267) (101 samples, 0.52%)</title><rect x="54.0500%" y="228" width="0.5227%" height="15" fill="rgb(211,96,35)" fg:x="10443" fg:w="101"/><text x="54.3000%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:267) (95 samples, 0.49%)</title><rect x="54.0811%" y="244" width="0.4917%" height="15" fill="rgb(253,215,40)" fg:x="10449" fg:w="95"/><text x="54.3311%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:267) (87 samples, 0.45%)</title><rect x="54.1225%" y="260" width="0.4503%" height="15" fill="rgb(211,81,21)" fg:x="10457" fg:w="87"/><text x="54.3725%" y="270.50"></text></g><g><title>copy (schotten_again.py:114) (52 samples, 0.27%)</title><rect x="54.3036%" y="276" width="0.2691%" height="15" fill="rgb(208,190,38)" fg:x="10492" fg:w="52"/><text x="54.5536%" y="286.50"></text></g><g><title>change_pov (schotten_again.py:191) (138 samples, 0.71%)</title><rect x="53.9982%" y="212" width="0.7142%" height="15" fill="rgb(235,213,38)" fg:x="10433" fg:w="138"/><text x="54.2482%" y="222.50"></text></g><g><title>change_pov (schotten_again.py:194) (23 samples, 0.12%)</title><rect x="54.8005%" y="212" width="0.1190%" height="15" fill="rgb(237,122,38)" fg:x="10588" fg:w="23"/><text x="55.0505%" y="222.50"></text></g><g><title>make_move (schotten_again.py:554) (243 samples, 1.26%)</title><rect x="53.9568%" y="196" width="1.2577%" height="15" fill="rgb(244,218,35)" fg:x="10425" fg:w="243"/><text x="54.2068%" y="206.50"></text></g><g><title>__eq__ (schotten_again.py:35) (96 samples, 0.50%)</title><rect x="56.0012%" y="212" width="0.4969%" height="15" fill="rgb(240,68,47)" fg:x="10820" fg:w="96"/><text x="56.2512%" y="222.50"></text></g><g><title>__eq__ (schotten_again.py:36) (66 samples, 0.34%)</title><rect x="56.4981%" y="212" width="0.3416%" height="15" fill="rgb(210,16,53)" fg:x="10916" fg:w="66"/><text x="56.7481%" y="222.50"></text></g><g><title>make_move (schotten_again.py:558) (326 samples, 1.69%)</title><rect x="55.3284%" y="196" width="1.6873%" height="15" fill="rgb(235,124,12)" fg:x="10690" fg:w="326"/><text x="55.5784%" y="206.50"></text></g><g><title>make_move (schotten_again.py:559) (52 samples, 0.27%)</title><rect x="57.0157%" y="196" width="0.2691%" height="15" fill="rgb(224,169,11)" fg:x="11016" fg:w="52"/><text x="57.2657%" y="206.50"></text></g><g><title>is_legal_claim (schotten_again.py:286) (21 samples, 0.11%)</title><rect x="57.7403%" y="244" width="0.1087%" height="15" fill="rgb(250,166,2)" fg:x="11156" fg:w="21"/><text x="57.9903%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:289) (31 samples, 0.16%)</title><rect x="57.8490%" y="244" width="0.1604%" height="15" fill="rgb(242,216,29)" fg:x="11177" fg:w="31"/><text x="58.0990%" y="254.50"></text></g><g><title>hand_strength (schotten_again.py:117) (30 samples, 0.16%)</title><rect x="57.8541%" y="260" width="0.1553%" height="15" fill="rgb(230,116,27)" fg:x="11178" fg:w="30"/><text x="58.1041%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:35) (31 samples, 0.16%)</title><rect x="58.3769%" y="260" width="0.1604%" height="15" fill="rgb(228,99,48)" fg:x="11279" fg:w="31"/><text x="58.6269%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:37) (27 samples, 0.14%)</title><rect x="58.5373%" y="260" width="0.1397%" height="15" fill="rgb(253,11,6)" fg:x="11310" fg:w="27"/><text x="58.7873%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:39) (24 samples, 0.12%)</title><rect x="58.6874%" y="260" width="0.1242%" height="15" fill="rgb(247,143,39)" fg:x="11339" fg:w="24"/><text x="58.9374%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:42) (24 samples, 0.12%)</title><rect x="58.8117%" y="260" width="0.1242%" height="15" fill="rgb(236,97,10)" fg:x="11363" fg:w="24"/><text x="59.0617%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:299) (175 samples, 0.91%)</title><rect x="58.1078%" y="244" width="0.9058%" height="15" fill="rgb(233,208,19)" fg:x="11227" fg:w="175"/><text x="58.3578%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:301) (74 samples, 0.38%)</title><rect x="59.0135%" y="244" width="0.3830%" height="15" fill="rgb(216,164,2)" fg:x="11402" fg:w="74"/><text x="59.2635%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:309) (89 samples, 0.46%)</title><rect x="59.4638%" y="244" width="0.4606%" height="15" fill="rgb(220,129,5)" fg:x="11489" fg:w="89"/><text x="59.7138%" y="254.50"></text></g><g><title>__eq__ (schotten_again.py:35) (352 samples, 1.82%)</title><rect x="63.8942%" y="260" width="1.8219%" height="15" fill="rgb(242,17,10)" fg:x="12345" fg:w="352"/><text x="64.1442%" y="270.50">_..</text></g><g><title>__eq__ (schotten_again.py:37) (232 samples, 1.20%)</title><rect x="65.7161%" y="260" width="1.2008%" height="15" fill="rgb(242,107,0)" fg:x="12697" fg:w="232"/><text x="65.9661%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:39) (192 samples, 0.99%)</title><rect x="67.0048%" y="260" width="0.9937%" height="15" fill="rgb(251,28,31)" fg:x="12946" fg:w="192"/><text x="67.2548%" y="270.50"></text></g><g><title>__eq__ (schotten_again.py:42) (276 samples, 1.43%)</title><rect x="67.9986%" y="260" width="1.4285%" height="15" fill="rgb(233,223,10)" fg:x="13138" fg:w="276"/><text x="68.2486%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:310) (1,978 samples, 10.24%)</title><rect x="59.9244%" y="244" width="10.2376%" height="15" fill="rgb(215,21,27)" fg:x="11578" fg:w="1978"/><text x="60.1744%" y="254.50">is_legal_claim ..</text></g><g><title>__getitem__ (schotten_again.py:83) (131 samples, 0.68%)</title><rect x="69.4840%" y="260" width="0.6780%" height="15" fill="rgb(232,23,21)" fg:x="13425" fg:w="131"/><text x="69.7340%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:311) (126 samples, 0.65%)</title><rect x="70.1620%" y="244" width="0.6521%" height="15" fill="rgb(244,5,23)" fg:x="13556" fg:w="126"/><text x="70.4120%" y="254.50"></text></g><g><title>__init__ (schotten_again.py:20) (27 samples, 0.14%)</title><rect x="71.2334%" y="260" width="0.1397%" height="15" fill="rgb(226,81,46)" fg:x="13763" fg:w="27"/><text x="71.4834%" y="270.50"></text></g><g><title>strength_from_list (schotten_again.py:98) (73 samples, 0.38%)</title><rect x="71.8338%" y="260" width="0.3778%" height="15" fill="rgb(247,70,30)" fg:x="13879" fg:w="73"/><text x="72.0838%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:313) (285 samples, 1.48%)</title><rect x="70.8193%" y="244" width="1.4751%" height="15" fill="rgb(212,68,19)" fg:x="13683" fg:w="285"/><text x="71.0693%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:322) (58 samples, 0.30%)</title><rect x="72.3772%" y="244" width="0.3002%" height="15" fill="rgb(240,187,13)" fg:x="13984" fg:w="58"/><text x="72.6272%" y="254.50"></text></g><g><title>is_legal_claim (schotten_again.py:323) (524 samples, 2.71%)</title><rect x="72.6774%" y="244" width="2.7121%" height="15" fill="rgb(223,113,26)" fg:x="14042" fg:w="524"/><text x="72.9274%" y="254.50">is..</text></g><g><title>is_legal_claim (schotten_again.py:324) (3,051 samples, 15.79%)</title><rect x="75.3895%" y="244" width="15.7911%" height="15" fill="rgb(206,192,2)" fg:x="14566" fg:w="3051"/><text x="75.6395%" y="254.50">is_legal_claim (schotten..</text></g><g><title>is_legal_claim (schotten_again.py:325) (749 samples, 3.88%)</title><rect x="91.1806%" y="244" width="3.8766%" height="15" fill="rgb(241,108,4)" fg:x="17617" fg:w="749"/><text x="91.4306%" y="254.50">is_l..</text></g><g><title>__init__ (schotten_again.py:20) (30 samples, 0.16%)</title><rect x="95.4712%" y="260" width="0.1553%" height="15" fill="rgb(247,173,49)" fg:x="18446" fg:w="30"/><text x="95.7212%" y="270.50"></text></g><g><title>__init__ (schotten_again.py:23) (21 samples, 0.11%)</title><rect x="95.7042%" y="260" width="0.1087%" height="15" fill="rgb(224,114,35)" fg:x="18491" fg:w="21"/><text x="95.9542%" y="270.50"></text></g><g><title>strength_from_list (schotten_again.py:98) (52 samples, 0.27%)</title><rect x="96.0820%" y="260" width="0.2691%" height="15" fill="rgb(245,159,27)" fg:x="18564" fg:w="52"/><text x="96.3320%" y="270.50"></text></g><g><title>is_legal_claim (schotten_again.py:327) (260 samples, 1.35%)</title><rect x="95.0779%" y="244" width="1.3457%" height="15" fill="rgb(245,172,44)" fg:x="18370" fg:w="260"/><text x="95.3279%" y="254.50"></text></g><g><title>claim_stone (schotten_again.py:358) (7,506 samples, 38.85%)</title><rect x="57.6885%" y="228" width="38.8489%" height="15" fill="rgb(236,23,11)" fg:x="11146" fg:w="7506"/><text x="57.9385%" y="238.50">claim_stone (schotten_again.py:358)</text></g><g><title>make_move (schotten_again.py:565) (7,554 samples, 39.10%)</title><rect x="57.4504%" y="196" width="39.0974%" height="15" fill="rgb(205,117,38)" fg:x="11100" fg:w="7554"/><text x="57.7004%" y="206.50">make_move (schotten_again.py:565)</text></g><g><title>claim_stone (schotten_again.py:536) (7,542 samples, 39.04%)</title><rect x="57.5126%" y="212" width="39.0352%" height="15" fill="rgb(237,72,25)" fg:x="11112" fg:w="7542"/><text x="57.7626%" y="222.50">claim_stone (schotten_again.py:536)</text></g><g><title>choose_stone_and_card (MCTS_v2.py:18) (53 samples, 0.27%)</title><rect x="96.6203%" y="212" width="0.2743%" height="15" fill="rgb(244,70,9)" fg:x="18668" fg:w="53"/><text x="96.8703%" y="222.50"></text></g><g><title>available_stones (schotten_again.py:188) (43 samples, 0.22%)</title><rect x="96.6720%" y="228" width="0.2226%" height="15" fill="rgb(217,125,39)" fg:x="18678" fg:w="43"/><text x="96.9220%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:188) (35 samples, 0.18%)</title><rect x="96.7134%" y="244" width="0.1812%" height="15" fill="rgb(235,36,10)" fg:x="18686" fg:w="35"/><text x="96.9634%" y="254.50"></text></g><g><title>simulate_turn (MCTS_v2.py:125) (29 samples, 0.15%)</title><rect x="96.9929%" y="228" width="0.1501%" height="15" fill="rgb(251,123,47)" fg:x="18740" fg:w="29"/><text x="97.2429%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (MCTS_v2.py:125) (27 samples, 0.14%)</title><rect x="97.0033%" y="244" width="0.1397%" height="15" fill="rgb(221,13,13)" fg:x="18742" fg:w="27"/><text x="97.2533%" y="254.50"></text></g><g><title>simulate_turn (MCTS_v2.py:126) (27 samples, 0.14%)</title><rect x="97.1430%" y="228" width="0.1397%" height="15" fill="rgb(238,131,9)" fg:x="18769" fg:w="27"/><text x="97.3930%" y="238.50"></text></g><g><title>simulate_turn (MCTS_v2.py:132) (55 samples, 0.28%)</title><rect x="97.5881%" y="228" width="0.2847%" height="15" fill="rgb(211,50,8)" fg:x="18855" fg:w="55"/><text x="97.8381%" y="238.50"></text></g><g><title>simulate_turn (MCTS_v2.py:134) (36 samples, 0.19%)</title><rect x="97.9090%" y="228" width="0.1863%" height="15" fill="rgb(245,182,24)" fg:x="18917" fg:w="36"/><text x="98.1590%" y="238.50"></text></g><g><title>simulate_turn (MCTS_v2.py:135) (50 samples, 0.26%)</title><rect x="98.0953%" y="228" width="0.2588%" height="15" fill="rgb(242,14,37)" fg:x="18953" fg:w="50"/><text x="98.3453%" y="238.50"></text></g><g><title>strength_from_list (schotten_again.py:98) (51 samples, 0.26%)</title><rect x="98.7889%" y="244" width="0.2640%" height="15" fill="rgb(246,228,12)" fg:x="19087" fg:w="51"/><text x="99.0389%" y="254.50"></text></g><g><title>simulate_turn (MCTS_v2.py:138) (152 samples, 0.79%)</title><rect x="98.3852%" y="228" width="0.7867%" height="15" fill="rgb(213,55,15)" fg:x="19009" fg:w="152"/><text x="98.6352%" y="238.50"></text></g><g><title>strength_from_list (schotten_again.py:99) (23 samples, 0.12%)</title><rect x="99.0528%" y="244" width="0.1190%" height="15" fill="rgb(209,9,3)" fg:x="19138" fg:w="23"/><text x="99.3028%" y="254.50"></text></g><g><title>choose_stone_and_card (MCTS_v2.py:23) (506 samples, 2.62%)</title><rect x="96.8997%" y="212" width="2.6189%" height="15" fill="rgb(230,59,30)" fg:x="18722" fg:w="506"/><text x="97.1497%" y="222.50">ch..</text></g><g><title>simulate_turn (MCTS_v2.py:140) (65 samples, 0.34%)</title><rect x="99.1822%" y="228" width="0.3364%" height="15" fill="rgb(209,121,21)" fg:x="19163" fg:w="65"/><text x="99.4322%" y="238.50"></text></g><g><title>choices (random.py:366) (28 samples, 0.14%)</title><rect x="99.3737%" y="244" width="0.1449%" height="15" fill="rgb(220,109,13)" fg:x="19200" fg:w="28"/><text x="99.6237%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (random.py:366) (21 samples, 0.11%)</title><rect x="99.4100%" y="260" width="0.1087%" height="15" fill="rgb(232,18,1)" fg:x="19207" fg:w="21"/><text x="99.6600%" y="270.50"></text></g><g><title>make_move (schotten_again.py:567) (591 samples, 3.06%)</title><rect x="96.5478%" y="196" width="3.0588%" height="15" fill="rgb(215,41,42)" fg:x="18654" fg:w="591"/><text x="96.7978%" y="206.50">mak..</text></g><g><title>make_move (schotten_again.py:572) (20 samples, 0.10%)</title><rect x="99.6170%" y="196" width="0.1035%" height="15" fill="rgb(224,123,36)" fg:x="19247" fg:w="20"/><text x="99.8670%" y="206.50"></text></g><g><title>play (schotten_again.py:531) (9,057 samples, 46.88%)</title><rect x="52.9320%" y="180" width="46.8765%" height="15" fill="rgb(240,125,3)" fg:x="10227" fg:w="9057"/><text x="53.1820%" y="190.50">play (schotten_again.py:531)</text></g><g><title>uct (MCTS_v2.py:236) (18,948 samples, 98.07%)</title><rect x="1.8374%" y="164" width="98.0695%" height="15" fill="rgb(205,98,50)" fg:x="355" fg:w="18948"/><text x="2.0874%" y="174.50">uct (MCTS_v2.py:236)</text></g><g><title>play (schotten_again.py:525) (19,296 samples, 99.87%)</title><rect x="0.0621%" y="116" width="99.8706%" height="15" fill="rgb(205,185,37)" fg:x="12" fg:w="19296"/><text x="0.3121%" y="126.50">play (schotten_again.py:525)</text></g><g><title>make_move (schotten_again.py:567) (19,286 samples, 99.82%)</title><rect x="0.1139%" y="132" width="99.8188%" height="15" fill="rgb(238,207,15)" fg:x="22" fg:w="19286"/><text x="0.3639%" y="142.50">make_move (schotten_again.py:567)</text></g><g><title>choose_stone_and_card (MCTS_v2.py:260) (19,285 samples, 99.81%)</title><rect x="0.1190%" y="148" width="99.8137%" height="15" fill="rgb(213,199,42)" fg:x="23" fg:w="19285"/><text x="0.3690%" y="158.50">choose_stone_and_card (MCTS_v2.py:260)</text></g><g><title>all (19,321 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="19321"/><text x="0.2500%" y="62.50"></text></g><g><title>process 18120:&quot;&quot;python&quot; test2.py&quot; (19,321 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="19321"/><text x="0.2500%" y="78.50">process 18120:&quot;&quot;python&quot; test2.py&quot;</text></g><g><title>process 11132:&quot;C:\ProgramData\Anaconda3\python.exe test2.py&quot; (19,321 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="19321"/><text x="0.2500%" y="94.50">process 11132:&quot;C:\ProgramData\Anaconda3\python.exe test2.py&quot;</text></g><g><title>&lt;module&gt; (test2.py:32) (19,309 samples, 99.94%)</title><rect x="0.0621%" y="100" width="99.9379%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="19309"/><text x="0.3121%" y="110.50">&lt;module&gt; (test2.py:32)</text></g></svg></svg>