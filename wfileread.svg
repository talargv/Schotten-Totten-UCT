<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="442" onload="init(evt)" viewBox="0 0 1200 442" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="442" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o wfileread.svg -s python test2.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="431.00"> </text><svg id="frames" x="10" width="1180" total_samples="19327"><g><title>&lt;lambda&gt; (schotten_again.py:378) (642 samples, 3.32%)</title><rect x="3.3011%" y="212" width="3.3218%" height="15" fill="rgb(227,0,7)" fg:x="638" fg:w="642"/><text x="3.5511%" y="222.50">&lt;la..</text></g><g><title>__init__ (schotten_again.py:19) (20 samples, 0.10%)</title><rect x="36.1411%" y="244" width="0.1035%" height="15" fill="rgb(217,0,24)" fg:x="6985" fg:w="20"/><text x="36.3911%" y="254.50"></text></g><g><title>__init__ (schotten_again.py:21) (963 samples, 4.98%)</title><rect x="36.2446%" y="244" width="4.9827%" height="15" fill="rgb(221,193,54)" fg:x="7005" fg:w="963"/><text x="36.4946%" y="254.50">__init..</text></g><g><title>__init__ (schotten_again.py:23) (8,958 samples, 46.35%)</title><rect x="41.2273%" y="244" width="46.3497%" height="15" fill="rgb(248,212,6)" fg:x="7968" fg:w="8958"/><text x="41.4773%" y="254.50">__init__ (schotten_again.py:23)</text></g><g><title>&lt;listcomp&gt; (schotten_again.py:379) (16,050 samples, 83.04%)</title><rect x="6.6229%" y="212" width="83.0444%" height="15" fill="rgb(208,68,35)" fg:x="1280" fg:w="16050"/><text x="6.8729%" y="222.50">&lt;listcomp&gt; (schotten_again.py:379)</text></g><g><title>&lt;lambda&gt; (schotten_again.py:379) (13,898 samples, 71.91%)</title><rect x="17.7575%" y="228" width="71.9098%" height="15" fill="rgb(232,128,0)" fg:x="3432" fg:w="13898"/><text x="18.0075%" y="238.50">&lt;lambda&gt; (schotten_again.py:379)</text></g><g><title>__init__ (schotten_again.py:24) (404 samples, 2.09%)</title><rect x="87.5770%" y="244" width="2.0903%" height="15" fill="rgb(207,160,47)" fg:x="16926" fg:w="404"/><text x="87.8270%" y="254.50">_..</text></g><g><title>&lt;module&gt; (test2.py:23) (17,356 samples, 89.80%)</title><rect x="0.0259%" y="100" width="89.8018%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="17356"/><text x="0.2759%" y="110.50">&lt;module&gt; (test2.py:23)</text></g><g><title>__init__ (schotten_again.py:543) (17,355 samples, 89.80%)</title><rect x="0.0310%" y="116" width="89.7967%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="17355"/><text x="0.2810%" y="126.50">__init__ (schotten_again.py:543)</text></g><g><title>__init__ (schotten_again.py:439) (17,354 samples, 89.79%)</title><rect x="0.0362%" y="132" width="89.7915%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="17354"/><text x="0.2862%" y="142.50">__init__ (schotten_again.py:439)</text></g><g><title>__init__ (schotten_again.py:417) (17,354 samples, 89.79%)</title><rect x="0.0362%" y="148" width="89.7915%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="17354"/><text x="0.2862%" y="158.50">__init__ (schotten_again.py:417)</text></g><g><title>&lt;listcomp&gt; (schotten_again.py:417) (17,354 samples, 89.79%)</title><rect x="0.0362%" y="164" width="89.7915%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="17354"/><text x="0.2862%" y="174.50">&lt;listcomp&gt; (schotten_again.py:417)</text></g><g><title>&lt;listcomp&gt; (schotten_again.py:417) (17,354 samples, 89.79%)</title><rect x="0.0362%" y="180" width="89.7915%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="17354"/><text x="0.2862%" y="190.50">&lt;listcomp&gt; (schotten_again.py:417)</text></g><g><title>__init__ (schotten_again.py:379) (17,345 samples, 89.74%)</title><rect x="0.0828%" y="196" width="89.7449%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="17345"/><text x="0.3328%" y="206.50">__init__ (schotten_again.py:379)</text></g><g><title>decode (encodings\cp1252.py:23) (31 samples, 0.16%)</title><rect x="89.6673%" y="212" width="0.1604%" height="15" fill="rgb(217,207,13)" fg:x="17330" fg:w="31"/><text x="89.9173%" y="222.50"></text></g><g><title>__init__ (schotten_again.py:23) (236 samples, 1.22%)</title><rect x="93.5013%" y="228" width="1.2211%" height="15" fill="rgb(231,73,38)" fg:x="18071" fg:w="236"/><text x="93.7513%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (schotten_again.py:384) (386 samples, 2.00%)</title><rect x="92.7821%" y="196" width="1.9972%" height="15" fill="rgb(225,20,46)" fg:x="17932" fg:w="386"/><text x="93.0321%" y="206.50">&lt;..</text></g><g><title>&lt;lambda&gt; (schotten_again.py:384) (322 samples, 1.67%)</title><rect x="93.1133%" y="212" width="1.6661%" height="15" fill="rgb(210,31,41)" fg:x="17996" fg:w="322"/><text x="93.3633%" y="222.50"></text></g><g><title>__init__ (schotten_again.py:384) (398 samples, 2.06%)</title><rect x="92.7304%" y="180" width="2.0593%" height="15" fill="rgb(221,200,47)" fg:x="17922" fg:w="398"/><text x="92.9804%" y="190.50">_..</text></g><g><title>place_card (schotten_again.py:425) (421 samples, 2.18%)</title><rect x="92.6476%" y="164" width="2.1783%" height="15" fill="rgb(226,26,5)" fg:x="17906" fg:w="421"/><text x="92.8976%" y="174.50">p..</text></g><g><title>make_move (schotten_again.py:607) (432 samples, 2.24%)</title><rect x="92.6476%" y="132" width="2.2352%" height="15" fill="rgb(249,33,26)" fg:x="17906" fg:w="432"/><text x="92.8976%" y="142.50">m..</text></g><g><title>place_card (schotten_again.py:518) (432 samples, 2.24%)</title><rect x="92.6476%" y="148" width="2.2352%" height="15" fill="rgb(235,183,28)" fg:x="17906" fg:w="432"/><text x="92.8976%" y="158.50">p..</text></g><g><title>play (schotten_again.py:560) (978 samples, 5.06%)</title><rect x="89.8277%" y="116" width="5.0603%" height="15" fill="rgb(221,5,38)" fg:x="17361" fg:w="978"/><text x="90.0777%" y="126.50">play (..</text></g><g><title>__init__ (schotten_again.py:23) (216 samples, 1.12%)</title><rect x="98.5306%" y="228" width="1.1176%" height="15" fill="rgb(247,18,42)" fg:x="19043" fg:w="216"/><text x="98.7806%" y="238.50"></text></g><g><title>__init__ (schotten_again.py:384) (371 samples, 1.92%)</title><rect x="97.7700%" y="180" width="1.9196%" height="15" fill="rgb(241,131,45)" fg:x="18896" fg:w="371"/><text x="98.0200%" y="190.50">_..</text></g><g><title>&lt;listcomp&gt; (schotten_again.py:384) (357 samples, 1.85%)</title><rect x="97.8424%" y="196" width="1.8472%" height="15" fill="rgb(249,31,29)" fg:x="18910" fg:w="357"/><text x="98.0924%" y="206.50">&lt;..</text></g><g><title>&lt;lambda&gt; (schotten_again.py:384) (291 samples, 1.51%)</title><rect x="98.1839%" y="212" width="1.5057%" height="15" fill="rgb(225,111,53)" fg:x="18976" fg:w="291"/><text x="98.4339%" y="222.50"></text></g><g><title>place_card (schotten_again.py:425) (389 samples, 2.01%)</title><rect x="97.7286%" y="164" width="2.0127%" height="15" fill="rgb(238,160,17)" fg:x="18888" fg:w="389"/><text x="97.9786%" y="174.50">p..</text></g><g><title>make_move (schotten_again.py:607) (395 samples, 2.04%)</title><rect x="97.7286%" y="132" width="2.0438%" height="15" fill="rgb(214,148,48)" fg:x="18888" fg:w="395"/><text x="97.9786%" y="142.50">m..</text></g><g><title>place_card (schotten_again.py:518) (395 samples, 2.04%)</title><rect x="97.7286%" y="148" width="2.0438%" height="15" fill="rgb(232,36,49)" fg:x="18888" fg:w="395"/><text x="97.9786%" y="158.50">p..</text></g><g><title>&lt;module&gt; (test2.py:25) (1,924 samples, 9.95%)</title><rect x="89.8277%" y="100" width="9.9550%" height="15" fill="rgb(209,103,24)" fg:x="17361" fg:w="1924"/><text x="90.0777%" y="110.50">&lt;module&gt; (test..</text></g><g><title>play (schotten_again.py:566) (946 samples, 4.89%)</title><rect x="94.8880%" y="116" width="4.8947%" height="15" fill="rgb(229,88,8)" fg:x="18339" fg:w="946"/><text x="95.1380%" y="126.50">play (..</text></g><g><title>&lt;module&gt; (numpy\__init__.py:150) (22 samples, 0.11%)</title><rect x="99.7827%" y="292" width="0.1138%" height="15" fill="rgb(213,181,19)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="302.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (22 samples, 0.11%)</title><rect x="99.7827%" y="308" width="0.1138%" height="15" fill="rgb(254,191,54)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 0.11%)</title><rect x="99.7827%" y="324" width="0.1138%" height="15" fill="rgb(241,83,37)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (22 samples, 0.11%)</title><rect x="99.7827%" y="340" width="0.1138%" height="15" fill="rgb(233,36,39)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="350.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (22 samples, 0.11%)</title><rect x="99.7827%" y="356" width="0.1138%" height="15" fill="rgb(226,3,54)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="366.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (22 samples, 0.11%)</title><rect x="99.7827%" y="372" width="0.1138%" height="15" fill="rgb(245,192,40)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="382.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (22 samples, 0.11%)</title><rect x="99.7827%" y="388" width="0.1138%" height="15" fill="rgb(238,167,29)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 0.11%)</title><rect x="99.7827%" y="404" width="0.1138%" height="15" fill="rgb(232,182,51)" fg:x="19285" fg:w="22"/><text x="100.0327%" y="414.50"></text></g><g><title>all (19,327 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="19327"/><text x="0.2500%" y="62.50"></text></g><g><title>process 8868:&quot;&quot;python&quot; test2.py&quot; (19,327 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="19327"/><text x="0.2500%" y="78.50">process 8868:&quot;&quot;python&quot; test2.py&quot;</text></g><g><title>process 18780:&quot;C:\ProgramData\Anaconda3\python.exe test2.py&quot; (19,327 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="19327"/><text x="0.2500%" y="94.50">process 18780:&quot;C:\ProgramData\Anaconda3\python.exe test2.py&quot;</text></g><g><title>&lt;module&gt; (test2.py:3) (42 samples, 0.22%)</title><rect x="99.7827%" y="100" width="0.2173%" height="15" fill="rgb(213,116,39)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="110.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (42 samples, 0.22%)</title><rect x="99.7827%" y="116" width="0.2173%" height="15" fill="rgb(222,207,29)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="126.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (42 samples, 0.22%)</title><rect x="99.7827%" y="132" width="0.2173%" height="15" fill="rgb(206,96,30)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="142.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (42 samples, 0.22%)</title><rect x="99.7827%" y="148" width="0.2173%" height="15" fill="rgb(218,138,4)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="158.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (42 samples, 0.22%)</title><rect x="99.7827%" y="164" width="0.2173%" height="15" fill="rgb(250,191,14)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="174.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (42 samples, 0.22%)</title><rect x="99.7827%" y="180" width="0.2173%" height="15" fill="rgb(239,60,40)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="190.50"></text></g><g><title>&lt;module&gt; (MCTS_v2.py:5) (42 samples, 0.22%)</title><rect x="99.7827%" y="196" width="0.2173%" height="15" fill="rgb(206,27,48)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (42 samples, 0.22%)</title><rect x="99.7827%" y="212" width="0.2173%" height="15" fill="rgb(225,35,8)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (42 samples, 0.22%)</title><rect x="99.7827%" y="228" width="0.2173%" height="15" fill="rgb(250,213,24)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (42 samples, 0.22%)</title><rect x="99.7827%" y="244" width="0.2173%" height="15" fill="rgb(247,123,22)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (42 samples, 0.22%)</title><rect x="99.7827%" y="260" width="0.2173%" height="15" fill="rgb(231,138,38)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (42 samples, 0.22%)</title><rect x="99.7827%" y="276" width="0.2173%" height="15" fill="rgb(231,145,46)" fg:x="19285" fg:w="42"/><text x="100.0327%" y="286.50"></text></g></svg></svg>